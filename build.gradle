buildscript {
    ext {
        kotlinVersion = '1.2.51'
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.nsd.noa.service'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile('org.apache.cxf:cxf-spring-boot-starter-jaxws:3.2.5')
    compile group: 'org.springframework', name: 'spring-oxm', version: '5.0.9.RELEASE'
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    runtime('org.springframework.boot:spring-boot-devtools')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile group: 'javax.mail', name: 'mail', version: '1.4.1'
}


configurations {
    jaxb
}

dependencies {
    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
}

task genJaxb() {
    ext.sourcesDirAcord = "${buildDir}/generated-sources/acord/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schemaAcord = "src/main/resources/CommlPkgPolicyQuoteInqRq.xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDirAcord)
            mkdir(dir: classesDir)



            xjc(destdir: sourcesDirAcord, schema: schemaAcord, package: 'com.nsd.acord.als.generated', removeOldOutput: 'yes') {
                arg(value: "-wsdl")
                arg(value: "-XautoNameResolution")
                arg(value: "-extension")
//                arg(value:"-disableXmlSecurity")
                binding(dir: "src/main/resources", includes: "bindings.xjb")
                produces(dir: sourcesDirAcord, includes: "**/*.java")

            }
        }
    }
}

task compileJaxb(dependsOn: genJaxb) {
    ext.sourcesDirAcord = "${buildDir}/generated-sources/acord/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schemaAcord = "src/main/resources/CommlPkgPolicyQuoteInqRq.xsd"

    outputs.dir classesDir

    doLast() {
        project.ant {

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDirAcord)
                include(name: "**/*.java")
                include(name: "*.java")
            }
        }

        delete fileTree('build') {
            include '**/*package-info*'
        }
    }
}

dependencies {
    compile(files(genJaxb.classesDir).builtBy(genJaxb))
    jaxb 'com.sun.xml.bind:jaxb-xjc:2.1.7'
}

compileJava.dependsOn 'genJaxb'
//
//jar {
//    from genJaxb.classesDir
//}

//task createJar(type: Jar, dependsOn: genJaxb) {
//    baseName = 'noa-ws-contract'
//    from("${buildDir}/classes/jaxb")
//    version = '1.0.0'
//}

task createAcordJar(type: Jar, dependsOn: compileJaxb ) {
    baseName = 'noa-acord-contract'
    from("${buildDir}/classes/jaxb")
}

//task generatedWSJar(type: Copy, dependsOn: createJar) {
//    from file("${buildDir}/libs/noa-ws-contract-1.0.0.jar")
//    into file("${projectDir}/libs")
//}

task generatedACORDJar(type: Copy, dependsOn: createAcordJar) {
    from file("${buildDir}/libs/noa-acord-contract-1.0.0.jar")
    into file("${projectDir}/libs")
}

// Code generation for wsdl 2 java

buildscript {
    ext {
        cxfVersion = '3.2.5'
        xjcVersion = '3.2.2'
        jaxbOutputDir = "$buildDir/generated/cxf"
        jaxb2BasicsVersion = '0.11.0'
    }
}

configurations {
    cxf
}

sourceSets {
    src {
        main {
            java {
                srcDirs += "$jaxbOutputDir"
            }
        }
    }
}

task wsdl2java(type: JavaExec) {
    ext {
        classesDir = file("$jaxbOutputDir")
        outputs.dir classesDir
    }
    systemProperties = ['javax.xml.accessExternalSchema': 'file', 'file.encoding': 'UTF8']
    outputs.upToDateWhen { false }
    outputs.dir classesDir
    main = 'org.apache.cxf.tools.wsdlto.WSDLToJava'
    classpath = project.configurations.cxf
    args '-d', classesDir
    args '-fe', 'jaxws21'
    args '-client'
    args '-verbose'
    args '-validate'
//    args '-mark-generated'
//  args '-xjc-X'
    args '-xjc-Xfluent-api'
    args '-xjc-Xts'
    args '-xjc-XhashCode'
    args '-xjc-Xequals'
//    args '-b', "$projectDir/src/main/resources/jaxws-custom-bindings.xjb"
    args "$projectDir/src/main/resources/NoaLinkService.wsdl"
    doLast {
        println "----- cxf jaxb2 files generated -----"
    }
}



dependencies {
//    cxf group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    cxf "org.apache.cxf:cxf-tools-wsdlto-core:$cxfVersion"
    cxf "org.apache.cxf:cxf-tools-wsdlto-frontend-jaxws:$cxfVersion"
    cxf "org.apache.cxf:cxf-tools-wsdlto-databinding-jaxb:$cxfVersion"

    cxf "org.jvnet.jaxb2_commons:jaxb2-fluent-api:3.0"
    cxf "org.apache.cxf.xjcplugins:cxf-xjc-ts:$xjcVersion"

    cxf "org.jvnet.jaxb2_commons:jaxb2-basics:$jaxb2BasicsVersion"

    compile "org.apache.cxf.xjc-utils:cxf-xjc-runtime:$xjcVersion"
    compile "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:$jaxb2BasicsVersion"
    compile 'commons-lang:commons-lang:2.6'
}

compileJava.dependsOn wsdl2java

task fatJar(type: Jar, dependsOn: wsdl2java) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task createWSDLJar(type: Jar, dependsOn: wsdl2java) {
    baseName = 'noa-wsdl-contract'
    from("${buildDir}/generated/classes/cxf/*")
    version = '1.0.0'
}

bootRun {
    systemProperty "spring.profiles.active", "local"
}